// Code generated by github.com/mackee/go-sqlla/v2/cmd/sqlla - DO NOT EDIT.
package main

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"database/sql"

	"github.com/mackee/go-sqlla/v2"
)

type chairSQL struct {
	where sqlla.Where
}

func NewChairSQL() chairSQL {
	q := chairSQL{}
	return q
}

var chairAllColumns = []string{
	"`id`", "`name`", "`description`", "`thumbnail`", "`price`", "`height`", "`width`", "`depth`", "`color`", "`features`", "`kind`", "`popularity`", "`stock`", "`features_array`", "`price_range`", "`height_range`", "`width_range`", "`depth_range`",
}

type chairSelectSQL struct {
	chairSQL
	Columns     []string
	order       string
	limit       *uint64
	offset      *uint64
	tableAlias  string
	joinClauses []string

	additionalWhereClause     string
	additionalWhereClauseArgs []interface{}

	groupByColumns []string

	isForUpdate bool
}

func (q chairSQL) Select() chairSelectSQL {
	return chairSelectSQL{
		q,
		chairAllColumns,
		"",
		nil,
		nil,
		"",
		nil,
		"",
		nil,
		nil,
		false,
	}
}

func (q chairSelectSQL) Or(qs ...chairSelectSQL) chairSelectSQL {
	ws := make([]sqlla.Where, 0, len(qs))
	for _, q := range qs {
		ws = append(ws, q.where)
	}
	q.where = append(q.where, sqlla.ExprOr(ws))
	return q
}

func (q chairSelectSQL) Limit(l uint64) chairSelectSQL {
	q.limit = &l
	return q
}

func (q chairSelectSQL) Offset(o uint64) chairSelectSQL {
	q.offset = &o
	return q
}

func (q chairSelectSQL) ForUpdate() chairSelectSQL {
	q.isForUpdate = true
	return q
}

func (q chairSelectSQL) TableAlias(alias string) chairSelectSQL {
	q.tableAlias = "`" + alias + "`"
	return q
}

func (q chairSelectSQL) SetColumns(columns ...string) chairSelectSQL {
	q.Columns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(.`") {
			q.Columns = append(q.Columns, column)
		} else {
			q.Columns = append(q.Columns, "`"+column+"`")
		}
	}
	return q
}

func (q chairSelectSQL) JoinClause(clause string) chairSelectSQL {
	q.joinClauses = append(q.joinClauses, clause)
	return q
}

func (q chairSelectSQL) AdditionalWhereClause(clause string, args ...interface{}) chairSelectSQL {
	q.additionalWhereClause = clause
	q.additionalWhereClauseArgs = args
	return q
}

func (q chairSelectSQL) appendColumnPrefix(column string) string {
	if q.tableAlias == "" || strings.ContainsAny(column, "(.") {
		return column
	}
	return q.tableAlias + "." + column
}

func (q chairSelectSQL) GroupBy(columns ...string) chairSelectSQL {
	q.groupByColumns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(.`") {
			q.groupByColumns = append(q.groupByColumns, column)
		} else {
			q.groupByColumns = append(q.groupByColumns, "`"+column+"`")
		}
	}
	return q
}

func (q chairSelectSQL) ID(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`id`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) IDIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`id`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByID(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`id`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Name(v string, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`name`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) NameIn(vs ...string) chairSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`name`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByName(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`name`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Description(v string, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`description`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) DescriptionIn(vs ...string) chairSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`description`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByDescription(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`description`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Thumbnail(v string, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`thumbnail`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) ThumbnailIn(vs ...string) chairSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`thumbnail`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByThumbnail(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`thumbnail`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Price(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`price`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) PriceIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`price`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByPrice(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`price`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Height(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`height`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) HeightIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`height`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByHeight(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`height`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Width(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`width`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) WidthIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`width`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByWidth(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`width`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Depth(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`depth`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) DepthIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`depth`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByDepth(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`depth`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Color(v string, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`color`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) ColorIn(vs ...string) chairSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`color`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByColor(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`color`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Features(v string, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`features`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) FeaturesIn(vs ...string) chairSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`features`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByFeatures(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`features`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Kind(v string, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`kind`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) KindIn(vs ...string) chairSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`kind`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByKind(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`kind`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Popularity(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`popularity`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) PopularityIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`popularity`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByPopularity(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`popularity`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) Stock(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`stock`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) StockIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`stock`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByStock(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`stock`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) FeaturesArray(v string, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`features_array`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) FeaturesArrayIn(vs ...string) chairSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`features_array`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByFeaturesArray(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`features_array`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) PriceRange(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`price_range`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) PriceRangeIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`price_range`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByPriceRange(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`price_range`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) HeightRange(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`height_range`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) HeightRangeIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`height_range`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByHeightRange(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`height_range`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) WidthRange(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`width_range`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) WidthRangeIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`width_range`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByWidthRange(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`width_range`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) DepthRange(v int64, exprs ...sqlla.Operator) chairSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`depth_range`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) DepthRangeIn(vs ...int64) chairSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`depth_range`")}
	q.where = append(q.where, where)
	return q
}

func (q chairSelectSQL) OrderByDepthRange(order sqlla.Order) chairSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`depth_range`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q chairSelectSQL) ToSql() (string, []interface{}, error) {
	columns := strings.Join(q.Columns, ", ")
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}

	tableName := "chair"
	if q.tableAlias != "" {
		tableName = tableName + " AS " + q.tableAlias
		pcs := make([]string, 0, len(q.Columns))
		for _, column := range q.Columns {
			pcs = append(pcs, q.appendColumnPrefix(column))
		}
		columns = strings.Join(pcs, ", ")
	}
	query := "SELECT " + columns + " FROM " + tableName
	if len(q.joinClauses) > 0 {
		jc := strings.Join(q.joinClauses, " ")
		query += " " + jc
	}
	if wheres != "" {
		query += " WHERE" + wheres
	}
	if q.additionalWhereClause != "" {
		query += " " + q.additionalWhereClause
		if len(q.additionalWhereClauseArgs) > 0 {
			vs = append(vs, q.additionalWhereClauseArgs...)
		}
	}
	if len(q.groupByColumns) > 0 {
		query += " GROUP BY "
		gbcs := make([]string, 0, len(q.groupByColumns))
		for _, column := range q.groupByColumns {
			gbcs = append(gbcs, q.appendColumnPrefix(column))
		}
		query += strings.Join(gbcs, ", ")
	}
	query += q.order
	if q.limit != nil {
		query += " LIMIT " + strconv.FormatUint(*q.limit, 10)
	}
	if q.offset != nil {
		query += " OFFSET " + strconv.FormatUint(*q.offset, 10)
	}

	if q.isForUpdate {
		query += " FOR UPDATE"
	}

	return query + ";", vs, nil
}

func (q chairSelectSQL) Single(db sqlla.DB) (Chair, error) {
	q.Columns = chairAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return Chair{}, err
	}

	row := db.QueryRow(query, args...)
	return q.Scan(row)
}

func (q chairSelectSQL) SingleContext(ctx context.Context, db sqlla.DB) (Chair, error) {
	q.Columns = chairAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return Chair{}, err
	}

	row := db.QueryRowContext(ctx, query, args...)
	return q.Scan(row)
}

func (q chairSelectSQL) All(db sqlla.DB) ([]Chair, error) {
	rs := make([]Chair, 0, 10)
	q.Columns = chairAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q chairSelectSQL) AllContext(ctx context.Context, db sqlla.DB) ([]Chair, error) {
	rs := make([]Chair, 0, 10)
	q.Columns = chairAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q chairSelectSQL) Scan(s sqlla.Scanner) (Chair, error) {
	var row Chair
	err := s.Scan(
		&row.ID,
		&row.Name,
		&row.Description,
		&row.Thumbnail,
		&row.Price,
		&row.Height,
		&row.Width,
		&row.Depth,
		&row.Color,
		&row.Features,
		&row.Kind,
		&row.Popularity,
		&row.Stock,
		&row.FeaturesArray,
		&row.PriceRange,
		&row.HeightRange,
		&row.WidthRange,
		&row.DepthRange,
	)
	return row, err
}

type chairUpdateSQL struct {
	chairSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q chairSQL) Update() chairUpdateSQL {
	return chairUpdateSQL{
		chairSQL: q,
		setMap:   sqlla.SetMap{},
	}
}

func (q chairUpdateSQL) SetID(v int64) chairUpdateSQL {
	q.setMap["`id`"] = v
	return q
}

func (q chairUpdateSQL) WhereID(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereIDIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetName(v string) chairUpdateSQL {
	q.setMap["`name`"] = v
	return q
}

func (q chairUpdateSQL) WhereName(v string, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`name`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereNameIn(vs ...string) chairUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`name`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetDescription(v string) chairUpdateSQL {
	q.setMap["`description`"] = v
	return q
}

func (q chairUpdateSQL) WhereDescription(v string, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`description`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereDescriptionIn(vs ...string) chairUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`description`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetThumbnail(v string) chairUpdateSQL {
	q.setMap["`thumbnail`"] = v
	return q
}

func (q chairUpdateSQL) WhereThumbnail(v string, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`thumbnail`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereThumbnailIn(vs ...string) chairUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`thumbnail`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetPrice(v int64) chairUpdateSQL {
	q.setMap["`price`"] = v
	return q
}

func (q chairUpdateSQL) WherePrice(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`price`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WherePriceIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`price`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetHeight(v int64) chairUpdateSQL {
	q.setMap["`height`"] = v
	return q
}

func (q chairUpdateSQL) WhereHeight(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`height`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereHeightIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`height`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetWidth(v int64) chairUpdateSQL {
	q.setMap["`width`"] = v
	return q
}

func (q chairUpdateSQL) WhereWidth(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`width`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereWidthIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`width`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetDepth(v int64) chairUpdateSQL {
	q.setMap["`depth`"] = v
	return q
}

func (q chairUpdateSQL) WhereDepth(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`depth`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereDepthIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`depth`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetColor(v string) chairUpdateSQL {
	q.setMap["`color`"] = v
	return q
}

func (q chairUpdateSQL) WhereColor(v string, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`color`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereColorIn(vs ...string) chairUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`color`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetFeatures(v string) chairUpdateSQL {
	q.setMap["`features`"] = v
	return q
}

func (q chairUpdateSQL) WhereFeatures(v string, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`features`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereFeaturesIn(vs ...string) chairUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`features`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetKind(v string) chairUpdateSQL {
	q.setMap["`kind`"] = v
	return q
}

func (q chairUpdateSQL) WhereKind(v string, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`kind`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereKindIn(vs ...string) chairUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`kind`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetPopularity(v int64) chairUpdateSQL {
	q.setMap["`popularity`"] = v
	return q
}

func (q chairUpdateSQL) WherePopularity(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`popularity`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WherePopularityIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`popularity`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetStock(v int64) chairUpdateSQL {
	q.setMap["`stock`"] = v
	return q
}

func (q chairUpdateSQL) WhereStock(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`stock`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereStockIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`stock`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetFeaturesArray(v string) chairUpdateSQL {
	q.setMap["`features_array`"] = v
	return q
}

func (q chairUpdateSQL) WhereFeaturesArray(v string, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`features_array`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereFeaturesArrayIn(vs ...string) chairUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`features_array`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetPriceRange(v int64) chairUpdateSQL {
	q.setMap["`price_range`"] = v
	return q
}

func (q chairUpdateSQL) WherePriceRange(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`price_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WherePriceRangeIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`price_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetHeightRange(v int64) chairUpdateSQL {
	q.setMap["`height_range`"] = v
	return q
}

func (q chairUpdateSQL) WhereHeightRange(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`height_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereHeightRangeIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`height_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetWidthRange(v int64) chairUpdateSQL {
	q.setMap["`width_range`"] = v
	return q
}

func (q chairUpdateSQL) WhereWidthRange(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`width_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereWidthRangeIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`width_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) SetDepthRange(v int64) chairUpdateSQL {
	q.setMap["`depth_range`"] = v
	return q
}

func (q chairUpdateSQL) WhereDepthRange(v int64, exprs ...sqlla.Operator) chairUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`depth_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) WhereDepthRangeIn(vs ...int64) chairUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`depth_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = Chair{}
	if t, ok := s.(chairDefaultUpdateHooker); ok {
		q, err = t.DefaultUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	setColumns, svs, err := q.setMap.ToUpdateSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	wheres, wvs, err := q.where.ToSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "UPDATE chair SET" + setColumns
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", append(svs, wvs...), nil
}
func (q chairUpdateSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (q chairUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}

type chairDefaultUpdateHooker interface {
	DefaultUpdateHook(chairUpdateSQL) (chairUpdateSQL, error)
}

type chairInsertSQL struct {
	chairSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q chairSQL) Insert() chairInsertSQL {
	return chairInsertSQL{
		chairSQL: q,
		setMap:   sqlla.SetMap{},
	}
}

func (q chairInsertSQL) ValueID(v int64) chairInsertSQL {
	q.setMap["`id`"] = v
	return q
}

func (q chairInsertSQL) ValueName(v string) chairInsertSQL {
	q.setMap["`name`"] = v
	return q
}

func (q chairInsertSQL) ValueDescription(v string) chairInsertSQL {
	q.setMap["`description`"] = v
	return q
}

func (q chairInsertSQL) ValueThumbnail(v string) chairInsertSQL {
	q.setMap["`thumbnail`"] = v
	return q
}

func (q chairInsertSQL) ValuePrice(v int64) chairInsertSQL {
	q.setMap["`price`"] = v
	return q
}

func (q chairInsertSQL) ValueHeight(v int64) chairInsertSQL {
	q.setMap["`height`"] = v
	return q
}

func (q chairInsertSQL) ValueWidth(v int64) chairInsertSQL {
	q.setMap["`width`"] = v
	return q
}

func (q chairInsertSQL) ValueDepth(v int64) chairInsertSQL {
	q.setMap["`depth`"] = v
	return q
}

func (q chairInsertSQL) ValueColor(v string) chairInsertSQL {
	q.setMap["`color`"] = v
	return q
}

func (q chairInsertSQL) ValueFeatures(v string) chairInsertSQL {
	q.setMap["`features`"] = v
	return q
}

func (q chairInsertSQL) ValueKind(v string) chairInsertSQL {
	q.setMap["`kind`"] = v
	return q
}

func (q chairInsertSQL) ValuePopularity(v int64) chairInsertSQL {
	q.setMap["`popularity`"] = v
	return q
}

func (q chairInsertSQL) ValueStock(v int64) chairInsertSQL {
	q.setMap["`stock`"] = v
	return q
}

func (q chairInsertSQL) ValueFeaturesArray(v string) chairInsertSQL {
	q.setMap["`features_array`"] = v
	return q
}

func (q chairInsertSQL) ValuePriceRange(v int64) chairInsertSQL {
	q.setMap["`price_range`"] = v
	return q
}

func (q chairInsertSQL) ValueHeightRange(v int64) chairInsertSQL {
	q.setMap["`height_range`"] = v
	return q
}

func (q chairInsertSQL) ValueWidthRange(v int64) chairInsertSQL {
	q.setMap["`width_range`"] = v
	return q
}

func (q chairInsertSQL) ValueDepthRange(v int64) chairInsertSQL {
	q.setMap["`depth_range`"] = v
	return q
}

func (q chairInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.chairInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	return query + ";", vs, nil
}

func (q chairInsertSQL) chairInsertSQLToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = Chair{}
	if t, ok := s.(chairDefaultInsertHooker); ok {
		q, err = t.DefaultInsertHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	qs, vs, err := q.setMap.ToInsertSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "INSERT INTO chair " + qs

	return query, vs, nil
}

func (q chairInsertSQL) OnDuplicateKeyUpdate() chairInsertOnDuplicateKeyUpdateSQL {
	return chairInsertOnDuplicateKeyUpdateSQL{
		insertSQL:               q,
		onDuplicateKeyUpdateMap: sqlla.SetMap{},
	}
}

func (q chairInsertSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {

		return nil, err
	}
	result, err := db.Exec(query, args...)
	return result, err
}

func (q chairInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {

		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type chairDefaultInsertHooker interface {
	DefaultInsertHook(chairInsertSQL) (chairInsertSQL, error)
}

type chairInsertSQLToSqler interface {
	chairInsertSQLToSql() (string, []interface{}, error)
}

type chairInsertOnDuplicateKeyUpdateSQL struct {
	insertSQL               chairInsertSQLToSqler
	onDuplicateKeyUpdateMap sqlla.SetMap
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateID(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`id`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateID(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`id`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateID() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`id`"] = sqlla.SetMapRawValue("VALUES(`id`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateName(v string) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`name`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateName(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`name`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateName() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`name`"] = sqlla.SetMapRawValue("VALUES(`name`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateDescription(v string) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`description`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateDescription(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`description`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateDescription() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`description`"] = sqlla.SetMapRawValue("VALUES(`description`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateThumbnail(v string) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`thumbnail`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateThumbnail(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`thumbnail`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateThumbnail() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`thumbnail`"] = sqlla.SetMapRawValue("VALUES(`thumbnail`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdatePrice(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`price`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdatePrice(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`price`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdatePrice() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`price`"] = sqlla.SetMapRawValue("VALUES(`price`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateHeight(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`height`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateHeight(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`height`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateHeight() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`height`"] = sqlla.SetMapRawValue("VALUES(`height`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateWidth(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`width`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateWidth(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`width`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateWidth() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`width`"] = sqlla.SetMapRawValue("VALUES(`width`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateDepth(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`depth`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateDepth(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`depth`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateDepth() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`depth`"] = sqlla.SetMapRawValue("VALUES(`depth`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateColor(v string) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`color`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateColor(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`color`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateColor() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`color`"] = sqlla.SetMapRawValue("VALUES(`color`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateFeatures(v string) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`features`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateFeatures(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`features`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateFeatures() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`features`"] = sqlla.SetMapRawValue("VALUES(`features`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateKind(v string) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`kind`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateKind(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`kind`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateKind() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`kind`"] = sqlla.SetMapRawValue("VALUES(`kind`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdatePopularity(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`popularity`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdatePopularity(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`popularity`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdatePopularity() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`popularity`"] = sqlla.SetMapRawValue("VALUES(`popularity`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateStock(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`stock`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateStock(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`stock`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateStock() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`stock`"] = sqlla.SetMapRawValue("VALUES(`stock`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateFeaturesArray(v string) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`features_array`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateFeaturesArray(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`features_array`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateFeaturesArray() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`features_array`"] = sqlla.SetMapRawValue("VALUES(`features_array`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdatePriceRange(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`price_range`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdatePriceRange(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`price_range`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdatePriceRange() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`price_range`"] = sqlla.SetMapRawValue("VALUES(`price_range`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateHeightRange(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`height_range`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateHeightRange(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`height_range`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateHeightRange() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`height_range`"] = sqlla.SetMapRawValue("VALUES(`height_range`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateWidthRange(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`width_range`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateWidthRange(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`width_range`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateWidthRange() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`width_range`"] = sqlla.SetMapRawValue("VALUES(`width_range`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateDepthRange(v int64) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`depth_range`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateDepthRange(v sqlla.SetMapRawValue) chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`depth_range`"] = v
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) SameOnUpdateDepthRange() chairInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`depth_range`"] = sqlla.SetMapRawValue("VALUES(`depth_range`)")
	return q
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = Chair{}
	if t, ok := s.(chairDefaultInsertOnDuplicateKeyUpdateHooker); ok {
		q, err = t.DefaultInsertOnDuplicateKeyUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}

	query, vs, err := q.insertSQL.chairInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	os, ovs, err := q.onDuplicateKeyUpdateMap.ToUpdateSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	query += " ON DUPLICATE KEY UPDATE" + os
	vs = append(vs, ovs...)

	return query + ";", vs, nil
}

func (q chairInsertOnDuplicateKeyUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {

		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type chairDefaultInsertOnDuplicateKeyUpdateHooker interface {
	DefaultInsertOnDuplicateKeyUpdateHook(chairInsertOnDuplicateKeyUpdateSQL) (chairInsertOnDuplicateKeyUpdateSQL, error)
}

type chairBulkInsertSQL struct {
	insertSQLs []chairInsertSQL
}

func (q chairSQL) BulkInsert() *chairBulkInsertSQL {
	return &chairBulkInsertSQL{
		insertSQLs: []chairInsertSQL{},
	}
}

func (q *chairBulkInsertSQL) Append(iqs ...chairInsertSQL) {
	q.insertSQLs = append(q.insertSQLs, iqs...)
}

func (q *chairBulkInsertSQL) chairInsertSQLToSql() (string, []interface{}, error) {
	if len(q.insertSQLs) == 0 {
		return "", []interface{}{}, fmt.Errorf("sqlla: This chairBulkInsertSQL's InsertSQL was empty")
	}
	iqs := make([]chairInsertSQL, len(q.insertSQLs))
	copy(iqs, q.insertSQLs)

	var s interface{} = Chair{}
	if t, ok := s.(chairDefaultInsertHooker); ok {
		for i, iq := range iqs {
			var err error
			iq, err = t.DefaultInsertHook(iq)
			if err != nil {
				return "", []interface{}{}, err
			}
			iqs[i] = iq
		}
	}

	sms := make(sqlla.SetMaps, 0, len(q.insertSQLs))
	for _, iq := range q.insertSQLs {
		sms = append(sms, iq.setMap)
	}

	query, vs, err := sms.ToInsertSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	return "INSERT INTO `chair` " + query, vs, nil
}

func (q *chairBulkInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.chairInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	return query + ";", vs, nil
}

func (q *chairBulkInsertSQL) OnDuplicateKeyUpdate() chairInsertOnDuplicateKeyUpdateSQL {
	return chairInsertOnDuplicateKeyUpdateSQL{
		insertSQL:               q,
		onDuplicateKeyUpdateMap: sqlla.SetMap{},
	}
}

func (q *chairBulkInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type chairDeleteSQL struct {
	chairSQL
}

func (q chairSQL) Delete() chairDeleteSQL {
	return chairDeleteSQL{
		q,
	}
}

func (q chairDeleteSQL) ID(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) IDIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Name(v string, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`name`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) NameIn(vs ...string) chairDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`name`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Description(v string, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`description`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) DescriptionIn(vs ...string) chairDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`description`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Thumbnail(v string, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`thumbnail`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) ThumbnailIn(vs ...string) chairDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`thumbnail`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Price(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`price`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) PriceIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`price`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Height(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`height`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) HeightIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`height`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Width(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`width`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) WidthIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`width`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Depth(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`depth`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) DepthIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`depth`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Color(v string, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`color`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) ColorIn(vs ...string) chairDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`color`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Features(v string, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`features`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) FeaturesIn(vs ...string) chairDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`features`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Kind(v string, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`kind`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) KindIn(vs ...string) chairDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`kind`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Popularity(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`popularity`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) PopularityIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`popularity`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) Stock(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`stock`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) StockIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`stock`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) FeaturesArray(v string, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`features_array`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) FeaturesArrayIn(vs ...string) chairDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`features_array`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) PriceRange(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`price_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) PriceRangeIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`price_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) HeightRange(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`height_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) HeightRangeIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`height_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) WidthRange(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`width_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) WidthRangeIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`width_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) DepthRange(v int64, exprs ...sqlla.Operator) chairDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`depth_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) DepthRangeIn(vs ...int64) chairDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`depth_range`"}
	q.where = append(q.where, where)
	return q
}

func (q chairDeleteSQL) ToSql() (string, []interface{}, error) {
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}

	query := "DELETE FROM chair"
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", vs, nil
}

func (q chairDeleteSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (q chairDeleteSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
