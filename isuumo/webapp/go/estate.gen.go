// Code generated by github.com/mackee/go-sqlla/v2/cmd/sqlla - DO NOT EDIT.
package main

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"database/sql"

	"github.com/mackee/go-sqlla/v2"
)

type estateSQL struct {
	where sqlla.Where
}

func NewEstateSQL() estateSQL {
	q := estateSQL{}
	return q
}

var estateAllColumns = []string{
	"`id`", "`thumbnail`", "`name`", "`description`", "`latitude`", "`longitude`", "`address`", "`rent`", "`door_height`", "`door_width`", "`features`", "`popularity`",
}

type estateSelectSQL struct {
	estateSQL
	Columns     []string
	order       string
	limit       *uint64
	offset      *uint64
	tableAlias  string
	joinClauses []string

	additionalWhereClause     string
	additionalWhereClauseArgs []interface{}

	groupByColumns []string

	isForUpdate bool
}

func (q estateSQL) Select() estateSelectSQL {
	return estateSelectSQL{
		q,
		estateAllColumns,
		"",
		nil,
		nil,
		"",
		nil,
		"",
		nil,
		nil,
		false,
	}
}

func (q estateSelectSQL) Or(qs ...estateSelectSQL) estateSelectSQL {
	ws := make([]sqlla.Where, 0, len(qs))
	for _, q := range qs {
		ws = append(ws, q.where)
	}
	q.where = append(q.where, sqlla.ExprOr(ws))
	return q
}

func (q estateSelectSQL) Limit(l uint64) estateSelectSQL {
	q.limit = &l
	return q
}

func (q estateSelectSQL) Offset(o uint64) estateSelectSQL {
	q.offset = &o
	return q
}

func (q estateSelectSQL) ForUpdate() estateSelectSQL {
	q.isForUpdate = true
	return q
}

func (q estateSelectSQL) TableAlias(alias string) estateSelectSQL {
	q.tableAlias = "`" + alias + "`"
	return q
}

func (q estateSelectSQL) SetColumns(columns ...string) estateSelectSQL {
	q.Columns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(.`") {
			q.Columns = append(q.Columns, column)
		} else {
			q.Columns = append(q.Columns, "`"+column+"`")
		}
	}
	return q
}

func (q estateSelectSQL) JoinClause(clause string) estateSelectSQL {
	q.joinClauses = append(q.joinClauses, clause)
	return q
}

func (q estateSelectSQL) AdditionalWhereClause(clause string, args ...interface{}) estateSelectSQL {
	q.additionalWhereClause = clause
	q.additionalWhereClauseArgs = args
	return q
}

func (q estateSelectSQL) appendColumnPrefix(column string) string {
	if q.tableAlias == "" || strings.ContainsAny(column, "(.") {
		return column
	}
	return q.tableAlias + "." + column
}

func (q estateSelectSQL) GroupBy(columns ...string) estateSelectSQL {
	q.groupByColumns = make([]string, 0, len(columns))
	for _, column := range columns {
		if strings.ContainsAny(column, "(.`") {
			q.groupByColumns = append(q.groupByColumns, column)
		} else {
			q.groupByColumns = append(q.groupByColumns, "`"+column+"`")
		}
	}
	return q
}

func (q estateSelectSQL) ID(v int64, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`id`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) IDIn(vs ...int64) estateSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`id`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByID(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`id`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) Thumbnail(v string, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`thumbnail`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) ThumbnailIn(vs ...string) estateSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`thumbnail`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByThumbnail(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`thumbnail`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) Name(v string, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`name`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) NameIn(vs ...string) estateSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`name`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByName(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`name`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) Description(v string, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`description`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) DescriptionIn(vs ...string) estateSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`description`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByDescription(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`description`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) Latitude(v float64, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprFloat64{Value: v, Op: op, Column: q.appendColumnPrefix("`latitude`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) LatitudeIn(vs ...float64) estateSelectSQL {
	where := sqlla.ExprMultiFloat64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`latitude`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByLatitude(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`latitude`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) Longitude(v float64, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprFloat64{Value: v, Op: op, Column: q.appendColumnPrefix("`longitude`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) LongitudeIn(vs ...float64) estateSelectSQL {
	where := sqlla.ExprMultiFloat64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`longitude`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByLongitude(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`longitude`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) Address(v string, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`address`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) AddressIn(vs ...string) estateSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`address`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByAddress(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`address`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) Rent(v int64, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`rent`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) RentIn(vs ...int64) estateSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`rent`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByRent(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`rent`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) DoorHeight(v int64, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`door_height`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) DoorHeightIn(vs ...int64) estateSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`door_height`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByDoorHeight(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`door_height`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) DoorWidth(v int64, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`door_width`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) DoorWidthIn(vs ...int64) estateSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`door_width`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByDoorWidth(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`door_width`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) Features(v string, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: q.appendColumnPrefix("`features`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) FeaturesIn(vs ...string) estateSelectSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`features`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByFeatures(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`features`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) Popularity(v int64, exprs ...sqlla.Operator) estateSelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: q.appendColumnPrefix("`popularity`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) PopularityIn(vs ...int64) estateSelectSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: q.appendColumnPrefix("`popularity`")}
	q.where = append(q.where, where)
	return q
}

func (q estateSelectSQL) OrderByPopularity(order sqlla.Order) estateSelectSQL {
	q.order = " ORDER BY " + q.appendColumnPrefix("`popularity`")
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}

func (q estateSelectSQL) ToSql() (string, []interface{}, error) {
	columns := strings.Join(q.Columns, ", ")
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}

	tableName := "estate"
	if q.tableAlias != "" {
		tableName = tableName + " AS " + q.tableAlias
		pcs := make([]string, 0, len(q.Columns))
		for _, column := range q.Columns {
			pcs = append(pcs, q.appendColumnPrefix(column))
		}
		columns = strings.Join(pcs, ", ")
	}
	query := "SELECT " + columns + " FROM " + tableName
	if len(q.joinClauses) > 0 {
		jc := strings.Join(q.joinClauses, " ")
		query += " " + jc
	}
	if wheres != "" {
		query += " WHERE" + wheres
	}
	if q.additionalWhereClause != "" {
		query += " " + q.additionalWhereClause
		if len(q.additionalWhereClauseArgs) > 0 {
			vs = append(vs, q.additionalWhereClauseArgs...)
		}
	}
	if len(q.groupByColumns) > 0 {
		query += " GROUP BY "
		gbcs := make([]string, 0, len(q.groupByColumns))
		for _, column := range q.groupByColumns {
			gbcs = append(gbcs, q.appendColumnPrefix(column))
		}
		query += strings.Join(gbcs, ", ")
	}
	query += q.order
	if q.limit != nil {
		query += " LIMIT " + strconv.FormatUint(*q.limit, 10)
	}
	if q.offset != nil {
		query += " OFFSET " + strconv.FormatUint(*q.offset, 10)
	}

	if q.isForUpdate {
		query += " FOR UPDATE"
	}

	return query + ";", vs, nil
}

func (q estateSelectSQL) Single(db sqlla.DB) (Estate, error) {
	q.Columns = estateAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return Estate{}, err
	}

	row := db.QueryRow(query, args...)
	return q.Scan(row)
}

func (q estateSelectSQL) SingleContext(ctx context.Context, db sqlla.DB) (Estate, error) {
	q.Columns = estateAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return Estate{}, err
	}

	row := db.QueryRowContext(ctx, query, args...)
	return q.Scan(row)
}

func (q estateSelectSQL) All(db sqlla.DB) ([]Estate, error) {
	rs := make([]Estate, 0, 10)
	q.Columns = estateAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q estateSelectSQL) AllContext(ctx context.Context, db sqlla.DB) ([]Estate, error) {
	rs := make([]Estate, 0, 10)
	q.Columns = estateAllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q estateSelectSQL) Scan(s sqlla.Scanner) (Estate, error) {
	var row Estate
	err := s.Scan(
		&row.ID,
		&row.Thumbnail,
		&row.Name,
		&row.Description,
		&row.Latitude,
		&row.Longitude,
		&row.Address,
		&row.Rent,
		&row.DoorHeight,
		&row.DoorWidth,
		&row.Features,
		&row.Popularity,
	)
	return row, err
}

type estateUpdateSQL struct {
	estateSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q estateSQL) Update() estateUpdateSQL {
	return estateUpdateSQL{
		estateSQL: q,
		setMap:    sqlla.SetMap{},
	}
}

func (q estateUpdateSQL) SetID(v int64) estateUpdateSQL {
	q.setMap["`id`"] = v
	return q
}

func (q estateUpdateSQL) WhereID(v int64, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereIDIn(vs ...int64) estateUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetThumbnail(v string) estateUpdateSQL {
	q.setMap["`thumbnail`"] = v
	return q
}

func (q estateUpdateSQL) WhereThumbnail(v string, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`thumbnail`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereThumbnailIn(vs ...string) estateUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`thumbnail`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetName(v string) estateUpdateSQL {
	q.setMap["`name`"] = v
	return q
}

func (q estateUpdateSQL) WhereName(v string, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`name`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereNameIn(vs ...string) estateUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`name`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetDescription(v string) estateUpdateSQL {
	q.setMap["`description`"] = v
	return q
}

func (q estateUpdateSQL) WhereDescription(v string, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`description`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereDescriptionIn(vs ...string) estateUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`description`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetLatitude(v float64) estateUpdateSQL {
	q.setMap["`latitude`"] = v
	return q
}

func (q estateUpdateSQL) WhereLatitude(v float64, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprFloat64{Value: v, Op: op, Column: "`latitude`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereLatitudeIn(vs ...float64) estateUpdateSQL {
	where := sqlla.ExprMultiFloat64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`latitude`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetLongitude(v float64) estateUpdateSQL {
	q.setMap["`longitude`"] = v
	return q
}

func (q estateUpdateSQL) WhereLongitude(v float64, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprFloat64{Value: v, Op: op, Column: "`longitude`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereLongitudeIn(vs ...float64) estateUpdateSQL {
	where := sqlla.ExprMultiFloat64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`longitude`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetAddress(v string) estateUpdateSQL {
	q.setMap["`address`"] = v
	return q
}

func (q estateUpdateSQL) WhereAddress(v string, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`address`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereAddressIn(vs ...string) estateUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`address`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetRent(v int64) estateUpdateSQL {
	q.setMap["`rent`"] = v
	return q
}

func (q estateUpdateSQL) WhereRent(v int64, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`rent`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereRentIn(vs ...int64) estateUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`rent`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetDoorHeight(v int64) estateUpdateSQL {
	q.setMap["`door_height`"] = v
	return q
}

func (q estateUpdateSQL) WhereDoorHeight(v int64, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`door_height`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereDoorHeightIn(vs ...int64) estateUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`door_height`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetDoorWidth(v int64) estateUpdateSQL {
	q.setMap["`door_width`"] = v
	return q
}

func (q estateUpdateSQL) WhereDoorWidth(v int64, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`door_width`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereDoorWidthIn(vs ...int64) estateUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`door_width`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetFeatures(v string) estateUpdateSQL {
	q.setMap["`features`"] = v
	return q
}

func (q estateUpdateSQL) WhereFeatures(v string, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`features`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WhereFeaturesIn(vs ...string) estateUpdateSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`features`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) SetPopularity(v int64) estateUpdateSQL {
	q.setMap["`popularity`"] = v
	return q
}

func (q estateUpdateSQL) WherePopularity(v int64, exprs ...sqlla.Operator) estateUpdateSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`popularity`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) WherePopularityIn(vs ...int64) estateUpdateSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`popularity`"}
	q.where = append(q.where, where)
	return q
}

func (q estateUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = Estate{}
	if t, ok := s.(estateDefaultUpdateHooker); ok {
		q, err = t.DefaultUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	setColumns, svs, err := q.setMap.ToUpdateSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	wheres, wvs, err := q.where.ToSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "UPDATE estate SET" + setColumns
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", append(svs, wvs...), nil
}
func (q estateUpdateSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (q estateUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}

type estateDefaultUpdateHooker interface {
	DefaultUpdateHook(estateUpdateSQL) (estateUpdateSQL, error)
}

type estateInsertSQL struct {
	estateSQL
	setMap  sqlla.SetMap
	Columns []string
}

func (q estateSQL) Insert() estateInsertSQL {
	return estateInsertSQL{
		estateSQL: q,
		setMap:    sqlla.SetMap{},
	}
}

func (q estateInsertSQL) ValueID(v int64) estateInsertSQL {
	q.setMap["`id`"] = v
	return q
}

func (q estateInsertSQL) ValueThumbnail(v string) estateInsertSQL {
	q.setMap["`thumbnail`"] = v
	return q
}

func (q estateInsertSQL) ValueName(v string) estateInsertSQL {
	q.setMap["`name`"] = v
	return q
}

func (q estateInsertSQL) ValueDescription(v string) estateInsertSQL {
	q.setMap["`description`"] = v
	return q
}

func (q estateInsertSQL) ValueLatitude(v float64) estateInsertSQL {
	q.setMap["`latitude`"] = v
	return q
}

func (q estateInsertSQL) ValueLongitude(v float64) estateInsertSQL {
	q.setMap["`longitude`"] = v
	return q
}

func (q estateInsertSQL) ValueAddress(v string) estateInsertSQL {
	q.setMap["`address`"] = v
	return q
}

func (q estateInsertSQL) ValueRent(v int64) estateInsertSQL {
	q.setMap["`rent`"] = v
	return q
}

func (q estateInsertSQL) ValueDoorHeight(v int64) estateInsertSQL {
	q.setMap["`door_height`"] = v
	return q
}

func (q estateInsertSQL) ValueDoorWidth(v int64) estateInsertSQL {
	q.setMap["`door_width`"] = v
	return q
}

func (q estateInsertSQL) ValueFeatures(v string) estateInsertSQL {
	q.setMap["`features`"] = v
	return q
}

func (q estateInsertSQL) ValuePopularity(v int64) estateInsertSQL {
	q.setMap["`popularity`"] = v
	return q
}

func (q estateInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.estateInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	return query + ";", vs, nil
}

func (q estateInsertSQL) estateInsertSQLToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = Estate{}
	if t, ok := s.(estateDefaultInsertHooker); ok {
		q, err = t.DefaultInsertHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	qs, vs, err := q.setMap.ToInsertSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "INSERT INTO estate " + qs

	return query, vs, nil
}

func (q estateInsertSQL) OnDuplicateKeyUpdate() estateInsertOnDuplicateKeyUpdateSQL {
	return estateInsertOnDuplicateKeyUpdateSQL{
		insertSQL:               q,
		onDuplicateKeyUpdateMap: sqlla.SetMap{},
	}
}

func (q estateInsertSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {

		return nil, err
	}
	result, err := db.Exec(query, args...)
	return result, err
}

func (q estateInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {

		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type estateDefaultInsertHooker interface {
	DefaultInsertHook(estateInsertSQL) (estateInsertSQL, error)
}

type estateInsertSQLToSqler interface {
	estateInsertSQLToSql() (string, []interface{}, error)
}

type estateInsertOnDuplicateKeyUpdateSQL struct {
	insertSQL               estateInsertSQLToSqler
	onDuplicateKeyUpdateMap sqlla.SetMap
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateID(v int64) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`id`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateID(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`id`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateID() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`id`"] = sqlla.SetMapRawValue("VALUES(`id`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateThumbnail(v string) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`thumbnail`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateThumbnail(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`thumbnail`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateThumbnail() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`thumbnail`"] = sqlla.SetMapRawValue("VALUES(`thumbnail`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateName(v string) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`name`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateName(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`name`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateName() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`name`"] = sqlla.SetMapRawValue("VALUES(`name`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateDescription(v string) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`description`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateDescription(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`description`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateDescription() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`description`"] = sqlla.SetMapRawValue("VALUES(`description`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateLatitude(v float64) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`latitude`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateLatitude(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`latitude`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateLatitude() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`latitude`"] = sqlla.SetMapRawValue("VALUES(`latitude`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateLongitude(v float64) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`longitude`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateLongitude(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`longitude`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateLongitude() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`longitude`"] = sqlla.SetMapRawValue("VALUES(`longitude`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateAddress(v string) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`address`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateAddress(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`address`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateAddress() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`address`"] = sqlla.SetMapRawValue("VALUES(`address`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateRent(v int64) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`rent`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateRent(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`rent`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateRent() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`rent`"] = sqlla.SetMapRawValue("VALUES(`rent`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateDoorHeight(v int64) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`door_height`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateDoorHeight(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`door_height`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateDoorHeight() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`door_height`"] = sqlla.SetMapRawValue("VALUES(`door_height`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateDoorWidth(v int64) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`door_width`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateDoorWidth(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`door_width`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateDoorWidth() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`door_width`"] = sqlla.SetMapRawValue("VALUES(`door_width`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdateFeatures(v string) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`features`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdateFeatures(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`features`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdateFeatures() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`features`"] = sqlla.SetMapRawValue("VALUES(`features`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ValueOnUpdatePopularity(v int64) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`popularity`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) RawValueOnUpdatePopularity(v sqlla.SetMapRawValue) estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`popularity`"] = v
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) SameOnUpdatePopularity() estateInsertOnDuplicateKeyUpdateSQL {
	q.onDuplicateKeyUpdateMap["`popularity`"] = sqlla.SetMapRawValue("VALUES(`popularity`)")
	return q
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = Estate{}
	if t, ok := s.(estateDefaultInsertOnDuplicateKeyUpdateHooker); ok {
		q, err = t.DefaultInsertOnDuplicateKeyUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}

	query, vs, err := q.insertSQL.estateInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	os, ovs, err := q.onDuplicateKeyUpdateMap.ToUpdateSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	query += " ON DUPLICATE KEY UPDATE" + os
	vs = append(vs, ovs...)

	return query + ";", vs, nil
}

func (q estateInsertOnDuplicateKeyUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {

		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type estateDefaultInsertOnDuplicateKeyUpdateHooker interface {
	DefaultInsertOnDuplicateKeyUpdateHook(estateInsertOnDuplicateKeyUpdateSQL) (estateInsertOnDuplicateKeyUpdateSQL, error)
}

type estateBulkInsertSQL struct {
	insertSQLs []estateInsertSQL
}

func (q estateSQL) BulkInsert() *estateBulkInsertSQL {
	return &estateBulkInsertSQL{
		insertSQLs: []estateInsertSQL{},
	}
}

func (q *estateBulkInsertSQL) Append(iqs ...estateInsertSQL) {
	q.insertSQLs = append(q.insertSQLs, iqs...)
}

func (q *estateBulkInsertSQL) estateInsertSQLToSql() (string, []interface{}, error) {
	if len(q.insertSQLs) == 0 {
		return "", []interface{}{}, fmt.Errorf("sqlla: This estateBulkInsertSQL's InsertSQL was empty")
	}
	iqs := make([]estateInsertSQL, len(q.insertSQLs))
	copy(iqs, q.insertSQLs)

	var s interface{} = Estate{}
	if t, ok := s.(estateDefaultInsertHooker); ok {
		for i, iq := range iqs {
			var err error
			iq, err = t.DefaultInsertHook(iq)
			if err != nil {
				return "", []interface{}{}, err
			}
			iqs[i] = iq
		}
	}

	sms := make(sqlla.SetMaps, 0, len(q.insertSQLs))
	for _, iq := range q.insertSQLs {
		sms = append(sms, iq.setMap)
	}

	query, vs, err := sms.ToInsertSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	return "INSERT INTO `estate` " + query, vs, nil
}

func (q *estateBulkInsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.estateInsertSQLToSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	return query + ";", vs, nil
}

func (q *estateBulkInsertSQL) OnDuplicateKeyUpdate() estateInsertOnDuplicateKeyUpdateSQL {
	return estateInsertOnDuplicateKeyUpdateSQL{
		insertSQL:               q,
		onDuplicateKeyUpdateMap: sqlla.SetMap{},
	}
}

func (q *estateBulkInsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	result, err := db.ExecContext(ctx, query, args...)
	return result, err
}

type estateDeleteSQL struct {
	estateSQL
}

func (q estateSQL) Delete() estateDeleteSQL {
	return estateDeleteSQL{
		q,
	}
}

func (q estateDeleteSQL) ID(v int64, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) IDIn(vs ...int64) estateDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`id`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) Thumbnail(v string, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`thumbnail`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) ThumbnailIn(vs ...string) estateDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`thumbnail`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) Name(v string, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`name`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) NameIn(vs ...string) estateDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`name`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) Description(v string, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`description`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) DescriptionIn(vs ...string) estateDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`description`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) Latitude(v float64, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprFloat64{Value: v, Op: op, Column: "`latitude`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) LatitudeIn(vs ...float64) estateDeleteSQL {
	where := sqlla.ExprMultiFloat64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`latitude`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) Longitude(v float64, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprFloat64{Value: v, Op: op, Column: "`longitude`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) LongitudeIn(vs ...float64) estateDeleteSQL {
	where := sqlla.ExprMultiFloat64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`longitude`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) Address(v string, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`address`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) AddressIn(vs ...string) estateDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`address`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) Rent(v int64, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`rent`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) RentIn(vs ...int64) estateDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`rent`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) DoorHeight(v int64, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`door_height`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) DoorHeightIn(vs ...int64) estateDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`door_height`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) DoorWidth(v int64, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`door_width`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) DoorWidthIn(vs ...int64) estateDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`door_width`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) Features(v string, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprString{Value: v, Op: op, Column: "`features`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) FeaturesIn(vs ...string) estateDeleteSQL {
	where := sqlla.ExprMultiString{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`features`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) Popularity(v int64, exprs ...sqlla.Operator) estateDeleteSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}
	where := sqlla.ExprInt64{Value: v, Op: op, Column: "`popularity`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) PopularityIn(vs ...int64) estateDeleteSQL {
	where := sqlla.ExprMultiInt64{Values: vs, Op: sqlla.MakeInOperator(len(vs)), Column: "`popularity`"}
	q.where = append(q.where, where)
	return q
}

func (q estateDeleteSQL) ToSql() (string, []interface{}, error) {
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}

	query := "DELETE FROM estate"
	if wheres != "" {
		query += " WHERE" + wheres
	}

	return query + ";", vs, nil
}

func (q estateDeleteSQL) Exec(db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.Exec(query, args...)
}

func (q estateDeleteSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}
	return db.ExecContext(ctx, query, args...)
}
